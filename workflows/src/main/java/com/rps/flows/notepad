//        public GameState pickWinner(String move, String lastMove, Party player1, Party player2, UniqueIdentifier linearId) {
//
//            if(move == lastMove) {
//                throw new FlowException("Tie. Need another round to determine winner.");
//            } else if (move == null) {
//                throw new FlowException("Player 2 hasn't taken his turn yet.");
//            } else if (move.equals("Rock") && lastMove.equals("Paper")) {
//                GameState outputGameState = new GameState(null, player1, player2, 0, 1, linearId);
//                return outputGameState;
//            } else if (move.equals("Rock") && lastMove.equals("Scissor")) {
//                GameState outputGameState = new GameState(null, player1, player2, 1, 0, linearId);
//                return outputGameState;
//            } else {
//                throw new FlowException("Not a proper move");
//            }
//        };

//        public GameState pickWinner( String move, String lastMove, Party player1, Party player2, UniqueIdentifier linearId)
//        {
////            gameCount++;
//            if (move.equals("Rock") && lastMove.equals("Scissors"))
//            {
//                GameState outputGameState = new GameState(null, player1, player2, 0, 1, linearId);
//            }
//            if (move.equals("Paper") && lastMove.equals("Rock"))
//            {
//                GameState outputGameState = new GameState(null, player1, player2, 1, 0, linearId);
//            }
//            return outputGameState;
//        }


        // Check if the initiator is the current player
//        if(!input.getCurrentPlayer().equals(getOurIdentity()))
//            throw new FlowException("Please wait for your turn");

        // Query the vault to fetch a list of all GameState states, and filter the results based on the linearId
        // to fetch the desired GameState states from the vault.

        //retrieve the game board
//        QueryCriteria.LinearStateQueryCriteria queryCriteria = new QueryCriteria.LinearStateQueryCriteria()
//                .withUuid(Arrays.asList(gameId.getId())).withStatus(Vault.StateStatus.UNCONSUMED);
//        StateAndRef<GameState> inputGameStateAndRef = getServiceHub().getVaultService().queryBy(GameState.class,queryCriteria).getStates().get(0);
//        if(inputGameStateAndRef == null){
//            throw new IllegalArgumentException("You are in another game");
//        }
//        GameState inputGameState = inputGameStateAndRef.getState().getData();

